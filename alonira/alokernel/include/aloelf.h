// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (C) 2023 Emily "TTG" Banerjee <prs.ttg+alonira@pm.me>

#ifndef ALO_KERNEL_ELF_H
#define ALO_KERNEL_ELF_H

#include <gencommon.h>

typedef enum {
	ALO_ELF_BITNESS_INVALID,
	ALO_ELF_BITNESS_32,
	ALO_ELF_BITNESS_64
} alo_elf_bitness_t;

typedef enum {
	ALO_ELF_ENDIANNESS_INVALID,
	ALO_ELF_ENDIANNESS_LITTLE,
	ALO_ELF_ENDIANNESS_BIG
} alo_elf_endianness_t;

typedef enum {
	ALO_ELF_VERSION_INVALID,
	ALO_ELF_VERSION_CURRENT
} alo_elf_version_t;

typedef enum {
	ALO_ELF_ABI_SYSV,
	ALO_ELF_ABI_HPUX,
	ALO_ELF_ABI_STANDALONE = 0xFF
} alo_elf_abi_t;

typedef struct GEN_PACKED {
	char magic[4];
	alo_elf_bitness_t bitness : 8;
	alo_elf_endianness_t endianness : 8;
	alo_elf_version_t version : 8;
	alo_elf_abi_t abi : 8;
	uint8_t abi_version;
	char reserved[7];
} alo_elf_header_identity_t;

typedef enum {
	ALO_ELF_TYPE_INVALID,
	ALO_ELF_TYPE_RELOCATABLE,
	ALO_ELF_TYPE_EXECUTABLE,
	ALO_ELF_TYPE_DYNAMIC,
	ALO_ELF_TYPE_CORE,
	ALO_ELF_TYPE_PROCESSOR_LOW = 0xFF00,
	ALO_ELF_TYPE_PROCESSOR_HIGH = 0xFFFF
} alo_elf_type_t;

// I *think* this list originates in the Linux `ELF.h` but to be honest
// it's used literally everywhere so who knows.
typedef enum {
	ALO_ELF_ARCHITECTURE_INVALID,
	ALO_ELF_ARCHITECTURE_WE32100,
	ALO_ELF_ARCHITECTURE_SPARC,
	ALO_ELF_ARCHITECTURE_I386,
	ALO_ELF_ARCHITECTURE_MOTOROLA_68K,
	ALO_ELF_ARCHITECTURE_MOTOROLA_88K,
	ALO_ELF_ARCHITECTURE_RESERVED0,
	ALO_ELF_ARCHITECTURE_I860,
	ALO_ELF_ARCHITECTURE_MIPS,
	ALO_ELF_ARCHITECTURE_S370,
	ALO_ELF_ARCHITECTURE_MIPS_RS3_LSB,
	ALO_ELF_ARCHITECTURE_RESERVED1,
	ALO_ELF_ARCHITECTURE_RESERVED2,
	ALO_ELF_ARCHITECTURE_RESERVED3,
	ALO_ELF_ARCHITECTURE_RESERVED4,
	ALO_ELF_ARCHITECTURE_HP_PA_RISC,
	ALO_ELF_ARCHITECTURE_RESERVED5,
	ALO_ELF_ARCHITECTURE_FUJITSU_VPP500,
	ALO_ELF_ARCHITECTURE_SPARC32_PLUS,
	ALO_ELF_ARCHITECTURE_I960,
	ALO_ELF_ARCHITECTURE_PPC,
	ALO_ELF_ARCHITECTURE_PPC64,
	ALO_ELF_ARCHITECTURE_S390,
	ALO_ELF_ARCHITECTURE_RESERVED6,
	ALO_ELF_ARCHITECTURE_RESERVED7,
	ALO_ELF_ARCHITECTURE_RESERVED8,
	ALO_ELF_ARCHITECTURE_RESERVED9,
	ALO_ELF_ARCHITECTURE_RESERVED10,
	ALO_ELF_ARCHITECTURE_RESERVED11,
	ALO_ELF_ARCHITECTURE_RESERVED12,
	ALO_ELF_ARCHITECTURE_RESERVED13,
	ALO_ELF_ARCHITECTURE_RESERVED14,
	ALO_ELF_ARCHITECTURE_RESERVED15,
	ALO_ELF_ARCHITECTURE_RESERVED16,
	ALO_ELF_ARCHITECTURE_RESERVED17,
	ALO_ELF_ARCHITECTURE_RESERVED18,
	ALO_ELF_ARCHITECTURE_NEC_V8000,
	ALO_ELF_ARCHITECTURE_FUJITSU_FR20,
	ALO_ELF_ARCHITECTURE_TRW_RH_32,
	ALO_ELF_ARCHITECTURE_MOTOROLA_RCE,
	ALO_ELF_ARCHITECTURE_ARM,
	ALO_ELF_ARCHITECTURE_DIGITAL_ALPHA,
	ALO_ELF_ARCHITECTURE_HITACHI_SH,
	ALO_ELF_ARCHITECTURE_SPARC_V9,
	ALO_ELF_ARCHITECTURE_SIEMENS_TRICORE,
	ALO_ELF_ARCHITECTURE_ARGONAUT_RISC,
	ALO_ELF_ARCHITECTURE_HITACHI_H8_300,
	ALO_ELF_ARCHITECTURE_HITACHI_H8_300H,
	ALO_ELF_ARCHITECTURE_HITACHI_H8S,
	ALO_ELF_ARCHITECTURE_HITACHI_H8_500,
	ALO_ELF_ARCHITECTURE_IA64,
	ALO_ELF_ARCHITECTURE_MIPSX,
	ALO_ELF_ARCHITECTURE_MOTOROLA_COLDFIRE,
	ALO_ELF_ARCHITECTURE_MOTOROLA_M68HC12,
	ALO_ELF_ARCHITECTURE_FUJITSU_MMA,
	ALO_ELF_ARCHITECTURE_SIEMENS_PCP,
	ALO_ELF_ARCHITECTURE_SONY_NCPU,
	ALO_ELF_ARCHITECTURE_DENSO_NDR1,
	ALO_ELF_ARCHITECTURE_MOTOROLA_STARCORE,
	ALO_ELF_ARCHITECTURE_TOYOTA_ME16,
	ALO_ELF_ARCHITECTURE_STM_ST100,
	ALO_ELF_ARCHITECTURE_ADVANCED_LOGIC_TINYJ,
	ALO_ELF_ARCHITECTURE_X86_64,
	ALO_ELF_ARCHITECTURE_SONY_DSP,
	ALO_ELF_ARCHITECTURE_DEC_PDP10,
	ALO_ELF_ARCHITECTURE_DEC_PDP11,
	ALO_ELF_ARCHITECTURE_SIEMENS_FX66,
	ALO_ELF_ARCHITECTURE_STM_ST9_PLUS,
	ALO_ELF_ARCHITECTURE_STM_ST7,
	ALO_ELF_ARCHITECTURE_MOTOROLA_MC68HC16,
	ALO_ELF_ARCHITECTURE_MOTOROLA_MC68HC11,
	ALO_ELF_ARCHITECTURE_MOTOROLA_MC68HC08,
	ALO_ELF_ARCHITECTURE_MOTOROLA_MC68HC05,
	ALO_ELF_ARCHITECTURE_SILICON_SVX,
	ALO_ELF_ARCHITECTURE_STM_ST19,
	ALO_ELF_ARCHITECTURE_VAX,
	ALO_ELF_ARCHITECTURE_AXIS_COMMUNICATIONS,
	ALO_ELF_ARCHITECTURE_INFINEON,
	ALO_ELF_ARCHITECTURE_ELEMENT_14_DSP,
	ALO_ELF_ARCHITECTURE_LSI_LOGIC_DSP,
	ALO_ELF_ARCHITECTURE_MMIX,
	ALO_ELF_ARCHITECTURE_HARVARD_MACHINE_INDEPENDENT_OBJECT, // "Harvard University machine-independent object files" doesn't seem to yield what this actually *is*
	ALO_ELF_ARCHITECTURE_SITERA_PRISM,
	ALO_ELF_ARCHITECTURE_ATMEL_AVR,
	ALO_ELF_ARCHITECTURE_FUJITSU_FR30,
	ALO_ELF_ARCHITECTURE_MITSUBISHI_D10V,
	ALO_ELF_ARCHITECTURE_MITSUBISHI_D30V,
	ALO_ELF_ARCHITECTURE_NEC_V8500,
	ALO_ELF_ARCHITECTURE_MITSUBISHI_M32R,
	ALO_ELF_ARCHITECTURE_MATSUSHITA_MN10300,
	ALO_ELF_ARCHITECTURE_MATSUSHITA_MN10200,
	ALO_ELF_ARCHITECTURE_PICOJAVA,
	ALO_ELF_ARCHITECTURE_OPENRISC,
	ALO_ELF_ARCHITECTURE_ARC_TANGENT_A5,
	ALO_ELF_ARCHITECTURE_XTENSA,
	ALO_ELF_ARCHITECTURE_ALPHAMOSAIC_VIDEOCORE,
	ALO_ELF_ARCHITECTURE_THOMPSON_GPP, // "Thompson Multimedia General Purpose Processor" also yields nothing relevant
	ALO_ELF_ARCHITECTURE_NATIONAL_SEMICONDUCTOR_32000,
	ALO_ELF_ARCHITECTURE_TENOR_NETWORK_TPC,
	ALO_ELF_ARCHITECTURE_TREBIA_SNP_1000,
	ALO_ELF_ARCHITECTURE_STM_ST200
} alo_elf_architecture_t;

typedef struct GEN_PACKED {
	alo_elf_header_identity_t identity;
	alo_elf_type_t type : 16;
	alo_elf_architecture_t architecture : 16;
	alo_elf_version_t version : 32;
	gen_uintptr_t entry : 32;
} alo_elf_header_t;

#define ALO_ELF_HEADER_MAGIC ((char[]) {0x7F, 'E', 'L', 'F'})

#endif
